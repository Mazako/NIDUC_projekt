def add_galois(x, y):
    return x ^ y


# FIELDS:
# __m - size of symbol in bits
# __t - number of correctable symbols
# __n - word size in symbols
# __k - message size in symbols
# __table - table of galois field (16 or 256)
# __generator - generator of code message
class ReedSolomonCode:
    def __init__(self, bits_mode, correctable_symbols):
        self.__m = bits_mode
        self.__t = correctable_symbols
        self.__n = pow(2, self.__m) - 1
        self.__k = self.__n - 2 * self.__t
        self.__generate_table()
        self.__reed_solomon_generator()

    def __generate_table(self):
        if self.__m == 4:
            self.__table = [  # GALOIS FIELD GENERATED BY POLYNOMIAL X^4 + X + 1, alpha == X
                1,  # alpha 0
                2,  # alpha 1
                4,  # alpha 2
                8,  # alpha 3
                3,  # alpha 4
                6,  # alpha 5
                12,  # alpha 6
                11,  # alpha 7
                5,  # alpha 8
                10,  # alpha 9
                7,  # alpha 10
                14,  # alpha 11
                15,  # alpha 12
                13,  # alpha 13
                9,  # alpha 14
            ]

    def __reed_solomon_generator(self):
        sub_polynomial_numbers = 2 * self.__t
        generator = [1]
        for i in range(1, sub_polynomial_numbers + 1):
            generator = self.__multiply_poly_galois(generator, [1, self.__table[i]])
        self.__generator = generator

    def __multiply_galois_16(self, x, y):
        gf_x = self.__table.index(x)
        gf_y = self.__table.index(y)
        return self.__table[(gf_x + gf_y) % 15]

    def __multiply_poly_galois(self, a, b):
        a_len = len(a)
        b_len = len(b)
        solution = [0] * (a_len + b_len - 1)
        for i in range(a_len):
            for j in range(b_len):
                solution[i + j] = add_galois(solution[i + j], self.__multiply_galois_16(a[i], b[j]))
        return solution

    def print_general_info(self):
        print('RS(', self.__n, ',', self.__k, ')')
        print('generator:', self.__generator)

    def get_generator(self):
        return self.__generator.copy()
