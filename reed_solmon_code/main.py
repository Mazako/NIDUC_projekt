GALOIS_FIELD_16 = [  # GALOIS FIELD GENERATED BY POLYNOMIAL X^4 + X + 1, alpha == X
    1,  # alpha 0
    2,  # alpha 1
    4,  # alpha 2
    8,  # alpha 3
    3,  # alpha 4
    6,  # alpha 5
    12,  # alpha 6
    11,  # alpha 7
    5,  # alpha 8
    10,  # alpha 9
    7,  # alpha 10
    14,  # alpha 11
    15,  # alpha 12
    13,  # alpha 13
    9,  # alpha 14
]


def add_galois(x, y):
    return x ^ y


def multiply_galois_16(x, y):
    gf_x = GALOIS_FIELD_16.index(x)
    gf_y = GALOIS_FIELD_16.index(y)
    return GALOIS_FIELD_16[(gf_x + gf_y) % 15]


def multiply_poly_galois(a, b):
    a_len = len(a)
    b_len = len(b)
    solution = [0] * (a_len + b_len - 1)
    for i in range(a_len):
        for j in range(b_len):
            solution[i + j] = add_galois(solution[i + j], multiply_galois_16(a[i], b[j]))
    return solution


def reed_solomon_generator(t):
    sub_polynomial_numbers = 2 * t
    generator = [1]
    for i in range(1, sub_polynomial_numbers + 1):
        generator = multiply_poly_galois(generator, [1, GALOIS_FIELD_16[i]])
    return generator


gen = reed_solomon_generator(4)
print(gen)